pipeline {
  agent any
  
  stages {
    stage('Checkout') { 
      steps {
        //bat 'echo passed'
        git branch: 'main', credentialsId:'d595fcb3-2cc0-444a-89ee-5f63ab583082', url: 'git@github.com:ShreyaRaghuvanshi1/L00179092_pipeline.git'
      }
    }
    
   
stage('Build and Test') {
      steps {
        
        // build the project and create a JAR file
        bat 'cd Mvn_L00179092 && mvn clean package'
      }
    }
  stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://localhost:9000" 
      }
       steps {
        withCredentials([string(credentialsId: 'sonarqube_L00179092', variable: 'SONAR_AUTH_TOKEN')]) {
          bat 'cd Mvn_L00179092 && mvn sonar:sonar \
  -Dsonar.projectKey=WebApp_L00179092 \
  -Dsonar.host.url=http://localhost:9000 \
  -Dsonar.login=838a116cf359d3ec525b15388ea72fd7b3897a0a'
        }
      }
    }
 stage('Build Docker Image') {
      environment {
        //DOCKER_IMAGE = "ShreyaRaghuvanshi ."
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            bat 'cd Mvn_L00179092 && docker build -t docker/shreya-raghuvanshi .'
 def dockerImage = docker.image("docker/shreya-raghuvanshi")
             docker.withRegistry('http://registry.hub.docker.com/', "docker-cred") {
                dockerImage.push()
           
        }
      }
    }
}
stage('Push Docker Image'){
 environment {
        DOCKER_IMAGE = "shreya-raghuvanshi ."
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
     def registry_url = "registry.hub.docker.com/"
      }

  steps{
    script {
withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable:'USER', passwordVariable: 'PASSWORD')])}
{
           // def registry_url = "registry.hub.docker.com/"
        def dockerImage = docker.image('docker/shreya-raghuvanshi')
            bat 'docker login -u $USER -p $PASSWORD'
            docker.withRegistry('http://registry.hub.docker.com/', "docker-cred") {
                bat 'docker push shreyaraghuvanshi1/docker/shreya-raghuvanshi'
            }
        }
      }
}

stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "L00179092_pipeline"
            GIT_USER_NAME = "ShreyaRaghuvanshi1"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                bat '''
                    git config user.email "L00179092@atu.ie"
                    git config user.name "ShreyaRaghuvanshi1"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" WebApp.java
                    git add WebApp.java
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
